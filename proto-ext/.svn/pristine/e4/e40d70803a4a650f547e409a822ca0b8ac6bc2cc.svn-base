// Tests for paleocompiler
// a place to put some complex, composed programs
// Note: sim is default platform, automatically includes DebugLayer

test: $(P2B) "(red 3)"
is 0 _ uint8_t script[] = { DEF_VM_OP, 0, 0, 0, 1, 0, 0, 1, 1, DEF_FUN_3_OP, LIT_3_OP, RED_OP, RET_OP, EXIT_OP };
is 1 _ uint16_t script_len = 14;

test: $(P2B) "(if (sense 1) (* 4 (sense 2)) (1st (2nd (tup (sense 3) (tup 4 5))))))"
is 0 _ uint8_t script[] = { DEF_VM_OP, 0, 0, 0, 3, 0, 0, 5, 2, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_FUN_OP, 32, LIT_1_OP, SENSE_OP, IF_OP, 23, LIT_3_OP, SENSE_OP, LIT_4_OP, LIT_OP, 5, TUP_OP, 0, 2, TUP_OP, 1, 2, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, POP_LET_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, JMP_OP, 4, LIT_4_OP, LIT_2_OP, SENSE_OP, MUL_OP, RET_OP, EXIT_OP };
is 1 _ uint16_t script_len = 46;


// Complex function, including an IF_16_OP and DEF_FUN16_OP
test: $(P2B) --platform "sim" "(if (sense 3) -1 (dilate (< (+ (timer) (gradient (> (- (timer) (gradient (sense 1))) 50))) 40) 20))"
is 0 _ uint8_t script[] = { DEF_VM_OP, 6, 6, 0, 38, 5, 0, 30, 12, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_FUN_2_OP, LIT_0_OP, RET_OP, DEF_FUN_6_OP, INF_OP, LIT_0_OP, TUP_OP, 0, 2, RET_OP, DEF_FUN_5_OP, REF_1_OP, REF_1_OP, REF_0_OP, MUX_OP, RET_OP, DEF_FUN_OP, 20, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 13, REF_0_OP, NBR_RANGE_OP, REF_2_OP, NBR_LAG_OP, DT_OP, ADD_OP, MUL_OP, ADD_OP, ADD_OP, REF_1_OP, LTE_OP, JMP_OP, 1, LIT_0_OP, RET_OP, DEF_FUN_4_OP, REF_1_OP, REF_0_OP, MIN_OP, RET_OP, DEF_FUN_OP, 12, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 5, REF_0_OP, NBR_RANGE_OP, ADD_OP, JMP_OP, 1, INF_OP, RET_OP, DEF_FUN_6_OP, INF_OP, LIT_0_OP, TUP_OP, 7, 2, RET_OP, DEF_FUN_5_OP, REF_1_OP, REF_1_OP, REF_0_OP, MUX_OP, RET_OP, DEF_FUN_OP, 20, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 13, REF_0_OP, NBR_RANGE_OP, REF_2_OP, NBR_LAG_OP, DT_OP, ADD_OP, MUL_OP, ADD_OP, ADD_OP, REF_1_OP, LTE_OP, JMP_OP, 1, LIT_0_OP, RET_OP, DEF_FUN_4_OP, REF_1_OP, REF_0_OP, MIN_OP, RET_OP, DEF_FUN_OP, 12, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 5, REF_0_OP, NBR_RANGE_OP, ADD_OP, JMP_OP, 1, INF_OP, RET_OP, DEF_FUN_6_OP, INF_OP, LIT_0_OP, TUP_OP, 14, 2, RET_OP, DEF_FUN_5_OP, REF_1_OP, REF_1_OP, REF_0_OP, MUX_OP, RET_OP, DEF_FUN_OP, 20, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 13, REF_0_OP, NBR_RANGE_OP, REF_2_OP, NBR_LAG_OP, DT_OP, ADD_OP, MUL_OP, ADD_OP, ADD_OP, REF_1_OP, LTE_OP, JMP_OP, 1, LIT_0_OP, RET_OP, DEF_FUN_4_OP, REF_1_OP, REF_0_OP, MIN_OP, RET_OP, DEF_FUN_OP, 12, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 5, REF_0_OP, NBR_RANGE_OP, ADD_OP, JMP_OP, 1, INF_OP, RET_OP, DEF_FUN_OP, 130, 80, LIT_3_OP, SENSE_OP, IF_OP, 130, 69, GLO_REF_OP, 21, INIT_FEEDBACK_OP, 0, LET_1_OP, REF_0_OP, REF_0_OP, DT_OP, ADD_OP, FEEDBACK_OP, 0, LET_1_OP, REF_0_OP, POP_LET_1_OP, POP_LET_1_OP, GLO_REF_OP, 21, INIT_FEEDBACK_OP, 1, LET_1_OP, REF_0_OP, REF_0_OP, DT_OP, ADD_OP, FEEDBACK_OP, 1, LET_1_OP, REF_0_OP, POP_LET_1_OP, POP_LET_1_OP, LIT_1_OP, SENSE_OP, LET_1_OP, GLO_REF_OP, 22, INIT_FEEDBACK_OP, 2, LET_1_OP, REF_0_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_3_OP, LIT_0_OP, LIT_0_OP, TUP_OP, 1, 2, GLO_REF_OP, 23, GLO_REF_OP, 24, REF_0_OP, FOLD_HOOD_PLUS_OP, 0, GLO_REF_OP, 25, GLO_REF_OP, 26, REF_0_OP, FOLD_HOOD_PLUS_OP, 1, LIT_0_OP, TUP_OP, 2, 2, DT_OP, LIT_0_OP, EQ_OP, IF_OP, 8, HOOD_RADIUS_OP, DT_OP, LIT_OP, 12, MUL_OP, DIV_OP, JMP_OP, 1, LIT_1_OP, LET_1_OP, REF_1_OP, REF_0_OP, DT_OP, MUL_OP, ADD_OP, REF_0_OP, TUP_OP, 3, 2, POP_LET_1_OP, VMUX_OP, 4, VMUX_OP, 5, POP_LET_2_OP, FEEDBACK_OP, 2, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_0_OP, REF_1_OP, TUP_OP, 6, 2, POP_LET_2_OP, POP_LET_1_OP, POP_LET_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, POP_LET_1_OP, SUB_OP, LIT_OP, 50, GT_OP, LET_1_OP, GLO_REF_OP, 27, INIT_FEEDBACK_OP, 3, LET_1_OP, REF_0_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_3_OP, LIT_0_OP, LIT_0_OP, TUP_OP, 8, 2, GLO_REF_OP, 28, GLO_REF_OP, 29, REF_0_OP, FOLD_HOOD_PLUS_OP, 2, GLO_REF_OP, 30, GLO_REF_OP, 31, REF_0_OP, FOLD_HOOD_PLUS_OP, 3, LIT_0_OP, TUP_OP, 9, 2, DT_OP, LIT_0_OP, EQ_OP, IF_OP, 8, HOOD_RADIUS_OP, DT_OP, LIT_OP, 12, MUL_OP, DIV_OP, JMP_OP, 1, LIT_1_OP, LET_1_OP, REF_1_OP, REF_0_OP, DT_OP, MUL_OP, ADD_OP, REF_0_OP, TUP_OP, 10, 2, POP_LET_1_OP, VMUX_OP, 11, VMUX_OP, 12, POP_LET_2_OP, FEEDBACK_OP, 3, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_0_OP, REF_1_OP, TUP_OP, 13, 2, POP_LET_2_OP, POP_LET_1_OP, POP_LET_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, POP_LET_1_OP, ADD_OP, LIT_OP, 40, LT_OP, LIT_OP, 20, LET_2_OP, REF_1_OP, LET_1_OP, GLO_REF_OP, 32, INIT_FEEDBACK_OP, 4, LET_1_OP, REF_0_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_3_OP, LIT_0_OP, LIT_0_OP, TUP_OP, 15, 2, GLO_REF_OP, 33, GLO_REF_OP, 34, REF_0_OP, FOLD_HOOD_PLUS_OP, 4, GLO_REF_OP, 35, GLO_REF_OP, 36, REF_0_OP, FOLD_HOOD_PLUS_OP, 5, LIT_0_OP, TUP_OP, 16, 2, DT_OP, LIT_0_OP, EQ_OP, IF_OP, 8, HOOD_RADIUS_OP, DT_OP, LIT_OP, 12, MUL_OP, DIV_OP, JMP_OP, 1, LIT_1_OP, LET_1_OP, REF_1_OP, REF_0_OP, DT_OP, MUL_OP, ADD_OP, REF_0_OP, TUP_OP, 17, 2, POP_LET_1_OP, VMUX_OP, 18, VMUX_OP, 19, POP_LET_2_OP, FEEDBACK_OP, 4, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_0_OP, REF_1_OP, TUP_OP, 20, 2, POP_LET_2_OP, POP_LET_1_OP, POP_LET_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, POP_LET_1_OP, REF_0_OP, LTE_OP, POP_LET_2_OP, JMP_OP, 5, LIT_FLO_OP, 0, 0, 128, 191, RET_OP, EXIT_OP };
is 1 _ uint16_t script_len = 535;

// Complex function, including a JMP_16_OP and DEF_FUN16_OP
test: $(P2B) -path "$(DEMOS)" --platform "sim" "(if (sense 3) (channel (sense 1) (sense 2) 10) -2)"
is 0 _ uint8_t script[] = { DEF_VM_OP, 13, 11, 0, 66, 6, 0, 33, 17, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_NUM_VEC_2_OP, DEF_FUN_6_OP, INF_OP, LIT_0_OP, TUP_OP, 0, 2, RET_OP, DEF_FUN_5_OP, REF_1_OP, REF_1_OP, REF_0_OP, MUX_OP, RET_OP, DEF_FUN_OP, 20, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 13, REF_0_OP, NBR_RANGE_OP, REF_2_OP, NBR_LAG_OP, DT_OP, ADD_OP, MUL_OP, ADD_OP, ADD_OP, REF_1_OP, LTE_OP, JMP_OP, 1, LIT_0_OP, RET_OP, DEF_FUN_4_OP, REF_1_OP, REF_0_OP, MIN_OP, RET_OP, DEF_FUN_OP, 12, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 5, REF_0_OP, NBR_RANGE_OP, ADD_OP, JMP_OP, 1, INF_OP, RET_OP, DEF_FUN_6_OP, INF_OP, LIT_0_OP, TUP_OP, 7, 2, RET_OP, DEF_FUN_5_OP, REF_1_OP, REF_1_OP, REF_0_OP, MUX_OP, RET_OP, DEF_FUN_OP, 20, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 13, REF_0_OP, NBR_RANGE_OP, REF_2_OP, NBR_LAG_OP, DT_OP, ADD_OP, MUL_OP, ADD_OP, ADD_OP, REF_1_OP, LTE_OP, JMP_OP, 1, LIT_0_OP, RET_OP, DEF_FUN_4_OP, REF_1_OP, REF_0_OP, MIN_OP, RET_OP, DEF_FUN_OP, 12, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 5, REF_0_OP, NBR_RANGE_OP, ADD_OP, JMP_OP, 1, INF_OP, RET_OP, DEF_FUN_2_OP, REF_1_OP, RET_OP, DEF_FUN_OP, 20, REF_0_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, REF_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, LT_OP, IF_OP, 3, REF_1_OP, JMP_OP, 1, REF_0_OP, RET_OP, DEF_FUN_6_OP, INF_OP, LIT_0_OP, TUP_OP, 17, 2, RET_OP, DEF_FUN_5_OP, REF_1_OP, REF_1_OP, REF_0_OP, MUX_OP, RET_OP, DEF_FUN_OP, 20, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 13, REF_0_OP, NBR_RANGE_OP, REF_2_OP, NBR_LAG_OP, DT_OP, ADD_OP, MUL_OP, ADD_OP, ADD_OP, REF_1_OP, LTE_OP, JMP_OP, 1, LIT_0_OP, RET_OP, DEF_FUN_4_OP, REF_1_OP, REF_0_OP, MIN_OP, RET_OP, DEF_FUN_OP, 12, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 5, REF_0_OP, NBR_RANGE_OP, ADD_OP, JMP_OP, 1, INF_OP, RET_OP, DEF_FUN_6_OP, INF_OP, LIT_0_OP, TUP_OP, 24, 2, RET_OP, DEF_FUN_5_OP, REF_1_OP, REF_1_OP, REF_0_OP, MUX_OP, RET_OP, DEF_FUN_OP, 20, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 13, REF_0_OP, NBR_RANGE_OP, REF_2_OP, NBR_LAG_OP, DT_OP, ADD_OP, MUL_OP, ADD_OP, ADD_OP, REF_1_OP, LTE_OP, JMP_OP, 1, LIT_0_OP, RET_OP, DEF_FUN_4_OP, REF_1_OP, REF_0_OP, MIN_OP, RET_OP, DEF_FUN_OP, 12, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 5, REF_0_OP, NBR_RANGE_OP, ADD_OP, JMP_OP, 1, INF_OP, RET_OP, DEF_FUN_6_OP, INF_OP, LIT_0_OP, TUP_OP, 31, 2, RET_OP, DEF_FUN_5_OP, REF_1_OP, REF_1_OP, REF_0_OP, MUX_OP, RET_OP, DEF_FUN_OP, 20, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 13, REF_0_OP, NBR_RANGE_OP, REF_2_OP, NBR_LAG_OP, DT_OP, ADD_OP, MUL_OP, ADD_OP, ADD_OP, REF_1_OP, LTE_OP, JMP_OP, 1, LIT_0_OP, RET_OP, DEF_FUN_4_OP, REF_1_OP, REF_0_OP, MIN_OP, RET_OP, DEF_FUN_OP, 12, NBR_RANGE_OP, LIT_0_OP, EQ_OP, IF_OP, 5, REF_0_OP, NBR_RANGE_OP, ADD_OP, JMP_OP, 1, INF_OP, RET_OP, DEF_FUN_OP, 132, 37, LIT_3_OP, SENSE_OP, IF_OP, 8, LIT_FLO_OP, 0, 0, 0, 192, JMP_OP, 132, 24, LIT_1_OP, SENSE_OP, LIT_2_OP, SENSE_OP, LIT_OP, 10, LET_3_OP, REF_2_OP, REF_1_OP, LET_2_OP, REF_1_OP, REF_0_OP, LET_1_OP, GLO_REF_OP, 38, INIT_FEEDBACK_OP, 0, LET_1_OP, REF_0_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_3_OP, LIT_0_OP, LIT_0_OP, TUP_OP, 1, 2, GLO_REF_OP, 39, GLO_REF_OP, 40, REF_0_OP, FOLD_HOOD_PLUS_OP, 0, GLO_REF_OP, 41, GLO_REF_OP, 42, REF_0_OP, FOLD_HOOD_PLUS_OP, 1, LIT_0_OP, TUP_OP, 2, 2, DT_OP, LIT_0_OP, EQ_OP, IF_OP, 8, HOOD_RADIUS_OP, DT_OP, LIT_OP, 12, MUL_OP, DIV_OP, JMP_OP, 1, LIT_1_OP, LET_1_OP, REF_1_OP, REF_0_OP, DT_OP, MUL_OP, ADD_OP, REF_0_OP, TUP_OP, 3, 2, POP_LET_1_OP, VMUX_OP, 4, VMUX_OP, 5, POP_LET_2_OP, FEEDBACK_OP, 0, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_0_OP, REF_1_OP, TUP_OP, 6, 2, POP_LET_2_OP, POP_LET_1_OP, POP_LET_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, POP_LET_1_OP, LET_2_OP, REF_1_OP, LET_1_OP, GLO_REF_OP, 43, INIT_FEEDBACK_OP, 1, LET_1_OP, REF_0_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_3_OP, LIT_0_OP, LIT_0_OP, TUP_OP, 8, 2, GLO_REF_OP, 44, GLO_REF_OP, 45, REF_0_OP, FOLD_HOOD_PLUS_OP, 2, GLO_REF_OP, 46, GLO_REF_OP, 47, REF_0_OP, FOLD_HOOD_PLUS_OP, 3, LIT_0_OP, TUP_OP, 9, 2, DT_OP, LIT_0_OP, EQ_OP, IF_OP, 8, HOOD_RADIUS_OP, DT_OP, LIT_OP, 12, MUL_OP, DIV_OP, JMP_OP, 1, LIT_1_OP, LET_1_OP, REF_1_OP, REF_0_OP, DT_OP, MUL_OP, ADD_OP, REF_0_OP, TUP_OP, 10, 2, POP_LET_1_OP, VMUX_OP, 11, VMUX_OP, 12, POP_LET_2_OP, FEEDBACK_OP, 1, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_0_OP, REF_1_OP, TUP_OP, 13, 2, POP_LET_2_OP, POP_LET_1_OP, POP_LET_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, POP_LET_1_OP, LET_1_OP, GLO_REF_OP, 48, INIT_FEEDBACK_OP, 2, LET_1_OP, REF_0_OP, REF_3_OP, REF_2_OP, GLO_REF_OP, 49, INF_OP, REF_2_OP, TUP_OP, 14, 2, REF_1_OP, REF_0_OP, TUP_OP, 15, 2, VFOLD_HOOD_OP, 16, 4, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, POP_LET_1_OP, MUX_OP, FEEDBACK_OP, 2, LET_1_OP, REF_0_OP, POP_LET_1_OP, POP_LET_1_OP, POP_LET_1_OP, POP_LET_2_OP, POP_LET_2_OP, LET_1_OP, REF_3_OP, LET_1_OP, GLO_REF_OP, 50, INIT_FEEDBACK_OP, 3, LET_1_OP, REF_0_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_3_OP, LIT_0_OP, LIT_0_OP, TUP_OP, 18, 2, GLO_REF_OP, 51, GLO_REF_OP, 52, REF_0_OP, FOLD_HOOD_PLUS_OP, 5, GLO_REF_OP, 53, GLO_REF_OP, 54, REF_0_OP, FOLD_HOOD_PLUS_OP, 6, LIT_0_OP, TUP_OP, 19, 2, DT_OP, LIT_0_OP, EQ_OP, IF_OP, 8, HOOD_RADIUS_OP, DT_OP, LIT_OP, 12, MUL_OP, DIV_OP, JMP_OP, 1, LIT_1_OP, LET_1_OP, REF_1_OP, REF_0_OP, DT_OP, MUL_OP, ADD_OP, REF_0_OP, TUP_OP, 20, 2, POP_LET_1_OP, VMUX_OP, 21, VMUX_OP, 22, POP_LET_2_OP, FEEDBACK_OP, 3, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_0_OP, REF_1_OP, TUP_OP, 23, 2, POP_LET_2_OP, POP_LET_1_OP, POP_LET_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, POP_LET_1_OP, REF_2_OP, LET_1_OP, GLO_REF_OP, 55, INIT_FEEDBACK_OP, 4, LET_1_OP, REF_0_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_3_OP, LIT_0_OP, LIT_0_OP, TUP_OP, 25, 2, GLO_REF_OP, 56, GLO_REF_OP, 57, REF_0_OP, FOLD_HOOD_PLUS_OP, 7, GLO_REF_OP, 58, GLO_REF_OP, 59, REF_0_OP, FOLD_HOOD_PLUS_OP, 8, LIT_0_OP, TUP_OP, 26, 2, DT_OP, LIT_0_OP, EQ_OP, IF_OP, 8, HOOD_RADIUS_OP, DT_OP, LIT_OP, 12, MUL_OP, DIV_OP, JMP_OP, 1, LIT_1_OP, LET_1_OP, REF_1_OP, REF_0_OP, DT_OP, MUL_OP, ADD_OP, REF_0_OP, TUP_OP, 27, 2, POP_LET_1_OP, VMUX_OP, 28, VMUX_OP, 29, POP_LET_2_OP, FEEDBACK_OP, 4, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_0_OP, REF_1_OP, TUP_OP, 30, 2, POP_LET_2_OP, POP_LET_1_OP, POP_LET_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, POP_LET_1_OP, ADD_OP, REF_0_OP, LIT_FLO_OP, 10, 215, 35, 60, ADD_OP, LTE_OP, LET_1_OP, REF_0_OP, REF_2_OP, LET_2_OP, REF_1_OP, LET_1_OP, GLO_REF_OP, 60, INIT_FEEDBACK_OP, 5, LET_1_OP, REF_0_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_3_OP, LIT_0_OP, LIT_0_OP, TUP_OP, 32, 2, GLO_REF_OP, 61, GLO_REF_OP, 62, REF_0_OP, FOLD_HOOD_PLUS_OP, 9, GLO_REF_OP, 63, GLO_REF_OP, 64, REF_0_OP, FOLD_HOOD_PLUS_OP, 10, LIT_0_OP, TUP_OP, 33, 2, DT_OP, LIT_0_OP, EQ_OP, IF_OP, 8, HOOD_RADIUS_OP, DT_OP, LIT_OP, 12, MUL_OP, DIV_OP, JMP_OP, 1, LIT_1_OP, LET_1_OP, REF_1_OP, REF_0_OP, DT_OP, MUL_OP, ADD_OP, REF_0_OP, TUP_OP, 34, 2, POP_LET_1_OP, VMUX_OP, 35, VMUX_OP, 36, POP_LET_2_OP, FEEDBACK_OP, 5, LET_1_OP, REF_0_OP, LIT_1_OP, ELT_OP, REF_0_OP, LIT_0_OP, ELT_OP, LET_2_OP, REF_0_OP, REF_1_OP, TUP_OP, 37, 2, POP_LET_2_OP, POP_LET_1_OP, POP_LET_1_OP, LET_1_OP, REF_0_OP, LIT_0_OP, ELT_OP, POP_LET_1_OP, POP_LET_1_OP, REF_0_OP, LTE_OP, POP_LET_2_OP, POP_LET_1_OP, POP_LET_1_OP, POP_LET_3_OP, RET_OP, EXIT_OP };
is 1 _ uint16_t script_len = 895;

// Long, but simple function:
test: $(P2B) -path "$(DEMOS)" --platform "sim" "(if (sense 3) (bigfn) 5)"
is 0 _ uint8_t script[] = { DEF_VM_OP, 0, 0, 0, 1, 0, 0, 52, 1, DEF_FUN_OP, 130, 53, LIT_3_OP, SENSE_OP, IF_OP, 5, LIT_OP, 5, JMP_OP, 130, 43, LIT_FLO_OP, 0, 0, 128, 191, LIT_FLO_OP, 0, 0, 0, 192, LIT_FLO_OP, 0, 0, 64, 192, LIT_FLO_OP, 0, 0, 128, 192, LIT_FLO_OP, 0, 0, 160, 192, LIT_FLO_OP, 0, 0, 192, 192, LIT_FLO_OP, 0, 0, 224, 192, LIT_FLO_OP, 0, 0, 0, 193, LIT_FLO_OP, 0, 0, 16, 193, LIT_FLO_OP, 0, 0, 32, 193, LIT_FLO_OP, 0, 0, 48, 193, LIT_FLO_OP, 0, 0, 64, 193, LIT_FLO_OP, 0, 0, 80, 193, LIT_FLO_OP, 0, 0, 96, 193, LIT_FLO_OP, 0, 0, 112, 193, LIT_FLO_OP, 0, 0, 128, 193, LIT_FLO_OP, 0, 0, 136, 193, LIT_FLO_OP, 0, 0, 144, 193, LIT_FLO_OP, 0, 0, 152, 193, LIT_FLO_OP, 0, 0, 160, 193, LIT_FLO_OP, 0, 0, 168, 193, LIT_FLO_OP, 0, 0, 176, 193, LIT_FLO_OP, 0, 0, 184, 193, LIT_FLO_OP, 0, 0, 192, 193, LIT_FLO_OP, 0, 0, 200, 193, LIT_FLO_OP, 0, 0, 208, 193, LIT_FLO_OP, 0, 0, 216, 193, LIT_FLO_OP, 0, 0, 224, 193, LIT_FLO_OP, 0, 0, 232, 193, LIT_FLO_OP, 0, 0, 240, 193, LIT_FLO_OP, 0, 0, 248, 193, LIT_FLO_OP, 0, 0, 0, 194, LIT_FLO_OP, 0, 0, 4, 194, LIT_FLO_OP, 0, 0, 8, 194, LIT_FLO_OP, 0, 0, 12, 194, LIT_FLO_OP, 0, 0, 16, 194, LIT_FLO_OP, 0, 0, 20, 194, LIT_FLO_OP, 0, 0, 24, 194, LIT_FLO_OP, 0, 0, 28, 194, LIT_FLO_OP, 0, 0, 32, 194, LIT_FLO_OP, 0, 0, 36, 194, LIT_FLO_OP, 0, 0, 40, 194, LIT_FLO_OP, 0, 0, 44, 194, LIT_FLO_OP, 0, 0, 48, 194, LIT_FLO_OP, 0, 0, 52, 194, LIT_FLO_OP, 0, 0, 56, 194, LIT_FLO_OP, 0, 0, 60, 194, LIT_FLO_OP, 0, 0, 64, 194, LIT_FLO_OP, 0, 0, 68, 194, LIT_FLO_OP, 0, 0, 72, 194, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, ADD_OP, RET_OP, EXIT_OP };
is 1 _ uint16_t script_len = 322;


// Error tests
test: $(P2B) --platform "sim" "(red (tup (tup 2 (tup 3)) 4))"
is 1 _ TYPE ERROR FOR RED ON ARG 0 GOT (TUP (TUP NUM (VEC NUM 1)) NUM) EXPECTED NUM

test: $(P2B) --platform "sim" "(red (tup 2 3 4 5))"
is 1 _ TYPE ERROR FOR RED ON ARG 0 GOT (VEC NUM 4) EXPECTED NUM

test: $(P2B) --platform "sim" "(elt 3 (fun () 4))"
is 1 _ ELT: UNABLE TO TYPE ELT ONE_FUN (ONE_NUM 3.00)

test: $(P2B) --platform "sim" "(* (tup 2) 4)"
is 0 _ (VEC NUM 1) (ONE_NUM 4.00): (GOP-CALL (TUP 2.0) 4.0)
is 1 _ NO APPLICABLE METHODS ERROR FOR B*
