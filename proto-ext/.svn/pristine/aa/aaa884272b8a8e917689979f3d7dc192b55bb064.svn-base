//Tuple Tester
//This test suite tests the functions listed under the "Tuple" section of the
//language reference. Namely: nul-tup, elt, map, fold, 1st, 2nd, 3rd, find, assoc


//Prelude: are tups even created properly?
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(tup 0 1 2 3)"
= 1 3 0
= 1 4 1
= 1 5 2
= 1 6 3

//Elt Operators
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(1st (tup 0 1 2 3 4))"
= 1 3 0

test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(2nd (tup 0 1 2 3 4))"
= 1 3 1

test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(3rd (tup 0 1 2 3 4))"
= 1 3 2

test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(elt (tup 0 1 2 3 4) 4)"
= 1 3 4

//Len Operator
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(len (nul-tup ))"
= 1 3 0
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(len (tup 0 1 2 3 4))"
= 1 3 5
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(len (tup 0 (tup 1 2) 3 4))"
= 1 3 4

// SLICE & MAP ARE KNOWN-BROKEN DUE TO COMPILER PROBLEMS
//Slice Operator
//test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(slice (tup 0 1 2 3 4 5) 3 5)"
//= 1 3 3
//= 1 4 4

//test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(slice (tup 0 1 2 3 4 5) -5 2)"
//= 1 3 0
//= 1 4 1


//Map
//test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(map neg (tup 0 1 2 3 4))"
//= 1 3 0
//= 1 4 -1
//= 1 5 -2
//= 1 6 -3
//= 1 7 -4

//test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(map log10 (tup 1 10 100 1000))"
//= 1 3 0
//= 1 4 1
//= 1 5 2
//= 1 6 3

//test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(map 1st (tup (tup 1 2) (tup 3 4) (tup 5 6))"
//= 1 3 1
//= 1 4 3
//= 1 5 5

//Fold
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(fold + 0 (tup 0 1 2 3 4))"
= 1 3 10
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(fold * 1 (tup 1 2 3 4 5))"
= 1 3 120


//Assoc
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(assoc 3 (tup (tup 1 3) (tup 3 6) (tup 4 7)))"
= 1 3 3
= 1 4 6
// KNOWN BROKEN DUE TO COMPILER PROBLEMS:
//test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(assoc 3 (tup (tup 1 3 1) (tup 3 6 2) (tup 4 7 3)))"
//= 1 3 3
//= 1 4 10
//test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(assoc 1 (tup (tup 1 2 3) (tup 1 2 3) (tup 1 2 3)))"
//= 1 3 1
//= 1 4 3
//test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(assoc 1 (tup (tup 3 2 1) (tup 3 2 1) (tup 3 2 1) (tup 3 2 1)))"
//= 1 3 1
//= 1 4 -1


//Find
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(find 1 (tup 1 2 3))"
= 1 3 1
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(find 1 (tup 2 2 3))"
= 1 3 0
test: $(PROTO) -n 1 -headless -dump-after 1 -stop-after 1.5 -NDall -Dvalue "(find 3 (tup 3 2 1))"
= 1 3 1
